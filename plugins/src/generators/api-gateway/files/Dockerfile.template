# ==== BUILD STAGE ====
FROM node:lts-alpine AS builder

WORKDIR /app

COPY . .

RUN npm install

# # Optional: Only generate client for specific services

# Build specific app (<%= name %>)
RUN npx nx build <%= name %>

# 混淆 ./dist -> ./dist-obf
RUN npx javascript-obfuscator ./apps/<%= name %>/dist --output ./apps/<%= name %>/dist-obf \
  --compact true \
  --control-flow-flattening true \
  --string-array true \
  --string-array-encoding base64

# ==== RUNTIME STAGE ====
FROM node:lts-alpine

WORKDIR /app

# 建議仍保留 dumb-init / ssh / postgresql-client 等
RUN apk update && \
    apk add --no-cache dumb-init openssh-client sshpass postgresql-client bash

# Copy runtime dependencies
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

COPY --from=builder /app/apps/<%= name %>/config/ ./config

# # Copy prisma (if your app runs prisma CLI or uses .env)
# COPY --from=builder /app/libs/prisma ./libs/prisma

# Copy built dist
COPY --from=builder /app/apps/<%= name %>/dist-obf ./dist

# Optional: entry script
COPY --from=builder /app/apps/<%= name %>/scripts/ ./scripts
RUN chmod +x ./scripts/*.sh

# 若有 uploads 或其他資料夾也要預設建立好
RUN mkdir -p /app/uploads && chown -R node:node /app/uploads

# 使用 node user 啟動
USER node

# Entry
ENTRYPOINT ["/usr/bin/dumb-init", "--", "./scripts/entry.sh"]